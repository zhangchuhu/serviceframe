/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef route_TYPES_H
#define route_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _RouteReq__isset {
  _RouteReq__isset() : context(false), caller_name(false), authorize_token(false), route_option(false), priority_hint(false), trace_debug(false), coding(false), upper_layer(false) {}
  bool context;
  bool caller_name;
  bool authorize_token;
  bool route_option;
  bool priority_hint;
  bool trace_debug;
  bool coding;
  bool upper_layer;
} _RouteReq__isset;

class RouteReq {
 public:

  static const char* ascii_fingerprint; // = "F9BD878EE205E452083BC69637B67FB9";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0xBD,0x87,0x8E,0xE2,0x05,0xE4,0x52,0x08,0x3B,0xC6,0x96,0x37,0xB6,0x7F,0xB9};

  RouteReq() : context(""), caller_name(""), authorize_token(""), route_option(""), priority_hint(0), trace_debug(""), coding(0), upper_layer("") {
  }

  virtual ~RouteReq() throw() {}

  std::string context;
  std::string caller_name;
  std::string authorize_token;
  std::string route_option;
  int32_t priority_hint;
  std::string trace_debug;
  int32_t coding;
  std::string upper_layer;

  _RouteReq__isset __isset;

  bool operator == (const RouteReq & rhs) const
  {
    if (!(context == rhs.context))
      return false;
    if (!(caller_name == rhs.caller_name))
      return false;
    if (!(authorize_token == rhs.authorize_token))
      return false;
    if (!(route_option == rhs.route_option))
      return false;
    if (!(priority_hint == rhs.priority_hint))
      return false;
    if (!(trace_debug == rhs.trace_debug))
      return false;
    if (!(coding == rhs.coding))
      return false;
    if (!(upper_layer == rhs.upper_layer))
      return false;
    return true;
  }
  bool operator != (const RouteReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RouteReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RouteResp__isset {
  _RouteResp__isset() : context(false), result_code(false), trace_debug(false), coding(false), upper_layer(false) {}
  bool context;
  bool result_code;
  bool trace_debug;
  bool coding;
  bool upper_layer;
} _RouteResp__isset;

class RouteResp {
 public:

  static const char* ascii_fingerprint; // = "33584CD6150018AF03D99F89786E9675";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x58,0x4C,0xD6,0x15,0x00,0x18,0xAF,0x03,0xD9,0x9F,0x89,0x78,0x6E,0x96,0x75};

  RouteResp() : context(""), result_code(0), trace_debug(""), coding(0), upper_layer("") {
  }

  virtual ~RouteResp() throw() {}

  std::string context;
  int32_t result_code;
  std::string trace_debug;
  int32_t coding;
  std::string upper_layer;

  _RouteResp__isset __isset;

  bool operator == (const RouteResp & rhs) const
  {
    if (!(context == rhs.context))
      return false;
    if (!(result_code == rhs.result_code))
      return false;
    if (!(trace_debug == rhs.trace_debug))
      return false;
    if (!(coding == rhs.coding))
      return false;
    if (!(upper_layer == rhs.upper_layer))
      return false;
    return true;
  }
  bool operator != (const RouteResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RouteResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
