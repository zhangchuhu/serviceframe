/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "route_types.h"



const char* RouteReq::ascii_fingerprint = "F9BD878EE205E452083BC69637B67FB9";
const uint8_t RouteReq::binary_fingerprint[16] = {0xF9,0xBD,0x87,0x8E,0xE2,0x05,0xE4,0x52,0x08,0x3B,0xC6,0x96,0x37,0xB6,0x7F,0xB9};

uint32_t RouteReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->context);
          this->__isset.context = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->caller_name);
          this->__isset.caller_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->authorize_token);
          this->__isset.authorize_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->route_option);
          this->__isset.route_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority_hint);
          this->__isset.priority_hint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->trace_debug);
          this->__isset.trace_debug = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coding);
          this->__isset.coding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->upper_layer);
          this->__isset.upper_layer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RouteReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RouteReq");
  xfer += oprot->writeFieldBegin("context", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->context);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("caller_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->caller_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("authorize_token", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->authorize_token);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("route_option", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->route_option);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("priority_hint", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->priority_hint);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("trace_debug", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->trace_debug);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("coding", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->coding);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("upper_layer", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeBinary(this->upper_layer);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* RouteResp::ascii_fingerprint = "33584CD6150018AF03D99F89786E9675";
const uint8_t RouteResp::binary_fingerprint[16] = {0x33,0x58,0x4C,0xD6,0x15,0x00,0x18,0xAF,0x03,0xD9,0x9F,0x89,0x78,0x6E,0x96,0x75};

uint32_t RouteResp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->context);
          this->__isset.context = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->result_code);
          this->__isset.result_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->trace_debug);
          this->__isset.trace_debug = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coding);
          this->__isset.coding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->upper_layer);
          this->__isset.upper_layer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RouteResp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RouteResp");
  xfer += oprot->writeFieldBegin("context", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->context);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("result_code", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->result_code);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("trace_debug", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->trace_debug);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("coding", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->coding);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("upper_layer", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->upper_layer);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


